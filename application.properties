# =================================================================
# 这是配置文件的一个本地示例, 用于本地测试, 在本地启动时需要添加
# spring.config.location=config/rest-server/ 配置项

# 此配置文件不再打到jar package中, 另外程序中, 最好也不要写默认配置
# 目的: 一是迅速定位配置问题, 二是防止默认配置引起的线上问题
#
# 命令行:
#   java -Dspring.config.location=config/rest-server/ -jar rest-server/target/xxx.jar
#
# Eclipse:
#   Menu: Run -> Run Configurations -> Arguments -> Program arguments
#   添加 --spring.config.location=config/
#
# IntelliJ IDEA
#  Menu: Run -> Edit Configurations -> Program arguments
#  添加 --spring.config.location=config/
# =================================================================

# ======================= kefu server configuration ===============
kefu.server.mode.read_only=false
#最大的允许的线程数, 超出这个数字之后, /health会返回错误
#不能小于10, 默认为3000
kefu.server.thread.max=11
# ======================= spring boot configuration ===============
# webapp 上启动的web服务的端口号
server.port=8585
spring.aop.auto=true
spring.aop.proxy-target-class=true
server.session.timeout=18000
spring.velocity.check-template-location=false
spring.velocity.enabled=false
spring.resources.add-mappings=false
spring.mvc.favicon.enabled=false
spring.jmx.enabled=false
multipart.enabled=false
multipart.max-file-size=10MB
# management configuration
management.security.enabled=true
management.context-path=/management
endpoints.health.sensitive=false
endpoints.configs.sensitive=false
#security configuration
security.user.name=kefu-admin
security.user.password=593d9dc725c8caf8a21e6f12337d3271
security.user.role=ADMIN
security.basic.path=/management

management.trace.repository.prefixFilters=/management

# ======================= database configuration ==================
# 数据库连接信息, 同一个部署应该都是一样的
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/weichat?useUnicode=true&characterEncoding=utf8&autoReconnect=true&rewriteBatchedStatements=TRUE&useSSL=false
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=1234
spring.datasource.max-active=5
spring.datasource.maximum-pool-size=10
spring.datasource.initial-size=1


# ======================= hibernate configuration ================
spring.jpa.hibernate.naming_strategy=org.hibernate.cfg.DefaultNamingStrategy
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.show_sql=false
# cache
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false
spring.jpa.properties.hibernate.cache.infinispan.use_synchronization=true
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.infinispan.InfinispanRegionFactory
spring.jpa.properties.hibernate.cache.infinispan.cfg=infinispan.xml

#spring.cache.infinispan.config=infinispan.xml
# ======================= redis configuration =====================
# 因为现在都是连本机的redis, 这个应该不需要修改, 同时保证每个kefu的机器上都有一个redis在监听 127.0.0.1
spring.redis.host=127.0.0.1
spring.redis.password=
spring.redis.port=6379
spring.redis.pool.max-idle=200
spring.redis.pool.min-idle=100
spring.redis.pool.max-active=80
spring.redis.pool.max-wait=-10
spring.redis.pool.max-total=1000
spring.redis.timeout=2000



# ============================ 机器人设置 ==========================
# global enable or disable robot
robot.enable=false
# robot service name
service.client.robot.feign.name=KFRobot
# robot service url
service.client.robot.feign.url=http://127.0.0.1:8888
# ============================ thrift server configuration ==========================
#connector中启动的thrift server的地址和端口号
connector.urls=127.0.0.1:9813

# ======================= ganglia report ==========================
# metrics report 到ganglia的地址和端口, 留空的话则不会report到ganglia
# 等于之前的  -Dreporter.ganglia.host=sdb-ali-hangzhou-log -Dreporter.ganglia.port=8684
reporter.ganglia.host=
# 注意, 这个属性需要或者不存在或者给一个数字的值, 不能留空
reporter.ganglia.port=8649






# ============================ 体验关联设置 ==========================
#体验关联功能是否启动
weichat.tenants.experienceChannel.enable=false
#体验关联号池范围
weichat.tenants.experienceChannel.min=100000
weichat.tenants.experienceChannel.max=199999
#体验关联APPKEY配置
weichat.tenants.experienceChannel.orgName=experience-kefu
weichat.tenants.experienceChannel.appName=sandbox
weichat.tenants.experienceChannel.clientId=YXA6_jaRYD3bEeaCSX1WvEaAGQ
weichat.tenants.experienceChannel.clientSecret=YXA6hO1-e06Ar7l--zpt06xTAc2FuFs
weichat.tenants.experienceChannel.password=123456
#体验关联创建失败重试
weichat.tenants.experienceChannel.retry=50

# ============================ send cloud configuration ==========================
sendCloud.mail.api_url=http://sendcloud.sohu.com/webapi/mail.send.json
sendCloud.mail.api_user=postmaster@easemobsub1.sendcloud.org
sendCloud.mail.api_key=h8hDBB7BhMdI7cwV
sendCloud.mail.from=kefu@easemob.com
sendCloud.mail.subject=\u8BF7\u67E5\u6536\u73AF\u4FE1\u5728\u7EBF\u5BA2\u670D\u9A8C\u8BC1\u7801
sendCloud.mail.forgotPassword.subject=\u73af\u4fe1\u5728\u7ebf\u5ba2\u670d\u5bc6\u7801\u627e\u56de
#In this case the token expires in 600 seconds
password.authcode.expire.time=600
# ================ jwt security key for reset passeord ===================
kf.rest.jwt.key=mystrkey

#============================= Storage service ==================================
#List all storage provider which need to be loaded, using qualified class name and separated by colon
#NFS: com.easemob.weichat.storage.NFSStorageProvider
#OSS: com.easemob.weichat.storage.OSSStorageProvider
storage.service.provider.list=com.easemob.weichat.storage.NFSStorageProvider
storage.service.provider.nfs.root=/tmp
storage.service.provider.oss.url=http://oss-cn-beijing.aliyuncs.com
#Bucket name rule
# 1. lower case letter, digital and hyphen
# 2. lower case letter or digital at the beginning and ending
# 3. name length between 3 and 63
storage.service.provider.oss.bucket.general=kefu-dev-bucket
storage.service.provider.oss.bucket.avatar=kefu-dev-avatar
storage.service.provider.oss.accesskey.id=qyzt5uedNT3C3RtS
storage.service.provider.oss.accesskey.secret=Doafm2wJeC30rmFB8nIsn3oVjRk1Dw


#============================ 会话相关配置 ==================================

#满意度调查
#请回复相应数字，对我的服务做出评价：1. 非常满意 2. 满意 3. 一般 4. 不满意 5. 非常不满意
kf.sevicesession.enquiry.invite.messge=\u8bf7\u56de\u590d\u76f8\u5e94\u6570\u5b57\uff0c\u5bf9\u6211\u7684\u670d\u52a1\u505a\u51fa\u8bc4\u4ef7\uff1a\u0031\u002e\u0020\u975e\u5e38\u6ee1\u610f\u0020\u0032\u002e\u0020\u6ee1\u610f\u0020\u0033\u002e\u0020\u4e00\u822c\u0020\u0034\u002e\u0020\u4e0d\u6ee1\u610f\u0020\u0035\u002e\u0020\u975e\u5e38\u4e0d\u6ee1\u610f
#评论参数,访客按照提示回复消息进行评论(见参数kf.sevicesession.enquiry.invite.messge),回复的内容需要转换为相应的评分
#比如回复1代表非常满意,对应的评分为5;回复4为不满意,对应的评分为2
kf.sevicesession.enquiry.reply.mapper=1:5,2:4,3:3,4:2,5:1

#满意度调查，微信渠道的部分客户要求倒序排列
#请回复相应数字，对我的服务做出评价：5. 非常满意 4. 满意 3. 一般 2. 不满意 1. 非常不满意
kf.sevicesession.enquiry.invite.messge2=\u8bf7\u56de\u590d\u76f8\u5e94\u6570\u5b57\uff0c\u5bf9\u6211\u7684\u670d\u52a1\u505a\u51fa\u8bc4\u4ef7\uff1a\u0035\u002e\u0020\u975e\u5e38\u6ee1\u610f\u0020\u0034\u002e\u0020\u6ee1\u610f\u0020\u0033\u002e\u0020\u4e00\u822c\u0020\u0032\u002e\u0020\u4e0d\u6ee1\u610f\u0020\u0031\u002e\u0020\u975e\u5e38\u4e0d\u6ee1\u610f
#如上的满意度调查文字对应的评分排列，比如回复5代表非常满意,对应的评分为5;回复2为不满意,对应的评分为2
kf.sevicesession.enquiry.reply.mapper2=5:5,4:4,3:3,2:2,1:1
#需要将满意度调查排序倒置的租户Id
kf.sevicesession.enquiry.reply.mapper2.tenantIds=


kf.module.usePushService=true
kf.module.useNewMessageApi=true
kf.servicesession.stop.max.size=25
consumer.activity.maxevents=10
#====================token config==================
kf.auth.token.enabled=false
kf.auth.token.loginReturnToken=false

#====================domain==================
kf.web.domain=localhost
kf.web.domain.organId=1
kf.web.domain.organName=easemob

kf.organ.agentnum.quota=5
kf.tenant.agentnum.quota=2
#Visitor authentication redis config
visitor.auth.redis.enable=true

#================CommonPhrase Timer Name================

kf.token-session.doublewrite=true

# kefu recommendation model status checker
kf.robot.recommendation.status.check.enable=false




kf.timer.redis.host=${spring.redis.host}
kf.timer.redis.port=${spring.redis.port}
kf.timer.redis.timeout=${spring.redis.timeout}
kf.timer.redis.pool.max-idle=${spring.redis.pool.max-idle}
kf.timer.redis.pool.min-idle=${spring.redis.pool.min-idle}
kf.timer.redis.pool.max-wait=${spring.redis.pool.max-wait}
kf.timer.redis.pool.max-total=${spring.redis.pool.max-total}
#kf.timer.redis.topic.prefix=timer_
#kf.timer.redis.lock.seconds=3

#####================================= redis topics 相关的配置项 ==========================================
consumer.schedule.topic=kf:pool:schedule
#second
consumer.schedule.shrink.expire=10

consumer.pushservice.topic=pushservice:data
visitor.auth.redis.topic=kf:visitor:auth:im
# outbound messaage topic
redis.outmessage.consumer.topic=kf:conn:outmessages

# 收消息的topic
redis.message.consumer.topic=kf:conn:inmessages
# user different redis topic for gray release

kf.servicesession.transfer=kf:servicesession:transfer

## ============================ kefu kafka (not the one used for connector)==============
kefu.kafka.producer.enabled=false
kefu.kafka.producer.properties.bootstrap.servers=127.0.0.1:9092
kefu.kafka.consumer.enabled=false
kefu.kafka.consumer.properties.zookeeper.connect=127.0.0.1:2181
kefu.kafka.consumer.properties.group.id=kefu-webapp
kefu.kafka.consumer.properties.client.id=${kefu.kafka.consumer.properties.group.id}-client-${random.int}
kefu.kafka.consumer.properties.bootstrap.servers=${kefu.kafka.producer.properties.bootstrap.servers}
kefu.kafka.bridge=false
kefu.kafka.topic=events



## ========================== sms verify code config ======================
# 云片
sms.yunpian.credential.appKey=03a984357fd4082cd060be60a1d125b1
sms.yunpian.credential.endpoint=https://sms.yunpian.com/v1/sms/send.json
# verify code expired time (second)
sms.verify-code.expired-second=600
sms.verify-code.send-interval=60
sms.verify-code.redis-key-prefix=verifyCode
sms.verify-code.enable=true
sms.verify-code.sender.enable=false

## ========================== 线程池设置 =================================
# 用来执行@Scheduler调度任务的线程池大小
scheduler.task.executor.poolSize=30
#
taskExecutor.corePoolSize=5
taskExecutor.maxPoolSize=10
taskExecutor.queueCapacity=25

kf.servicesession.taskExecutor.corePoolSize=5
kf.servicesession.taskExecutor.maxPoolSize=10
kf.servicesession.taskExecutor.queueCapacity=25

kf.timer.taskExecutor.corePoolSize=10
kf.timer.taskExecutor.maxPoolSize=25
kf.timer.taskExecutor.queueCapacity=50

#consumer for schedule function, need kf.redis.pool.schedule.host
consumer.schedule.num=1
#ms

# 处理消息的进程数
message.consumer.num=10

servicesession.creation.consumer.num=10
#consumer for agent keepavlie function, need kf.redis.pool.agentstate.host
consumer.activity.num=5

# 见 SessionHistoryFeignClient
service.client.sessionHistory.feign.name=SessionHistory
service.client.sessionHistory.feign.url=127.0.0.1:8589

# CallCenter服务发现
service.client.gateway.callcenter.feign.name=GatewayCallcenterRouteway
service.client.gateway.callcenter.feign.url=127.0.0.1:8587

#每个会话的最后一条消息存放在redis中,关闭会话时清理,单位:seconds
kf.servicesession.lastmessage.expire=30



kf.sevicesession.enquiry.search.invite.limit=10

kf.redis.pool.schedule.host=${spring.redis.host}
kf.redis.pool.schedule.port=${spring.redis.port}
kf.redis.pool.schedule.timeout=${spring.redis.timeout}
kf.redis.pool.schedule.max-idle=${spring.redis.pool.max-idle}
kf.redis.pool.schedule.min-idle=${spring.redis.pool.min-idle}
kf.redis.pool.schedule.max-wait=${spring.redis.pool.max-wait}
kf.redis.pool.schedule.max-total=${spring.redis.pool.max-total}


kefu.agentsession.enabled=true
kf.redis.pool.agentsession.host=${spring.redis.host}
kf.redis.pool.agentsession.port=${spring.redis.port}
kf.redis.pool.agentsession.timeout=${spring.redis.timeout}
kf.redis.pool.agentsession.max-idle=${spring.redis.pool.max-idle}
kf.redis.pool.agentsession.min-idle=${spring.redis.pool.min-idle}
kf.redis.pool.agentsession.max-wait=${spring.redis.pool.max-wait}
kf.redis.pool.agentsession.max-total=${spring.redis.pool.max-total}

kefu.agentsession2.enabled=false
kf.redis.pool.agentsession2.host=${kf.redis.pool.agentsession.host}
kf.redis.pool.agentsession2.port=${kf.redis.pool.agentsession.port}

# websocket的过期时间,超过一段时间没有心跳将会认为连接已经断开
kefu.agentconnection.expire.time.seconds=40
# 双写时需要打开,防止重复处理websocket过期,webapp现在不会收到websocket信号,应该始终为false
kefu.agentconnection.expire.uselock=false
# 调度会话时，每个技能组最大调用的坐席数
kf.schedule.skill-group.limit=10

#新的agentsession里面会有一个属性标明websocket是否存活,旧的agentsession里面没有,调度时需要check这个属性判断坐席还可以被调度
#等新版本全量之后需打开这个开关
kf.schedule.agent.checkconn=false
#双写期间,标明使用那个redis来读取agentsession,1标明使用agentsession;2标明使用agentsession2
kf.agentsession.readfrom=1

#客服手工接入会话上限控制参数配置
kf.agentsession.running.session.max=200
# ================ Waiting Queue limit configuration ====================
kf.agentsession.waiting.queue.max.default=200

# chatmessage 分表策略相关配置
kefu.db.chatmessage.shards.enabled=false
kefu.db.chatmessage.shards.count=-1
kefu.db.chatmessage.writer.single_table=true
kefu.db.chatmessage.writer.sharded_table=true
kefu.db.chatmessage.reader=single_table

# ================ familiar agent redis config ====================
kf.familiarAgent.redis.host=${spring.redis.host}
kf.familiarAgent.redis.port=${spring.redis.port}
kf.familiarAgent.redis.timeout=${spring.redis.timeout}
kf.familiarAgent.redis.pool.max-idle=${spring.redis.pool.max-idle}
kf.familiarAgent.redis.pool.min-idle=${spring.redis.pool.min-idle}
kf.familiarAgent.redis.pool.max-wait=${spring.redis.pool.max-wait}
kf.familiarAgent.redis.pool.max-total=${spring.redis.pool.max-total}

# ================= familiar agent config =========================
kf.schedule.candidate.agent.size=10
kf.familiarAgent.key.expire=5184000


kf.redis.pool.lastchatmessage.host=${spring.redis.host}
kf.redis.pool.lastchatmessage.port=${spring.redis.port}
kf.redis.pool.lastchatmessage.timeout=${spring.redis.timeout}
kf.redis.pool.lastchatmessage.max-idle=${spring.redis.pool.max-idle}
kf.redis.pool.lastchatmessage.min-idle=${spring.redis.pool.min-idle}
kf.redis.pool.lastchatmessage.max-wait=${spring.redis.pool.max-wait}
kf.redis.pool.lastchatmessage.max-total=${spring.redis.pool.max-total}

kf.servicesession.query.limit=0
easemob.app.dns.address=http://www.easemob.com/easemob/server.xml
easemob.app.dns.address.alternative=http://rs.easemob.com/easemob/server.xml

# ================= 一键创建关联，自动创建IM用户 =========================
kf.autoCreateAssociation.app.prefix=kefuchannel
kf.redis.autoCreateAssociation.imbackend.domain.key=kefu:autoCreateAssociation:imbackend:domain
kf.autoCreateAssociation.imbackend.domain=a1.easemob.com

# 新东方organId
xdf_organ_id=989
# 新东方访客信息服务
service.client.xdfvisitor.feign.name=IntegrationXdfVisitor
service.client.xdfvisitor.feign.url=http://localhost:8989

kf.chatmessage.time.redis.host=${spring.redis.host}
kf.chatmessage.time.redis.port=${spring.redis.port}
kf.chatmessage.time.redis.timeout=${spring.redis.timeout}
kf.chatmessage.time.redis.pool.max-idle=${spring.redis.pool.max-idle}
kf.chatmessage.time.redis.pool.min-idle=${spring.redis.pool.min-idle}
kf.chatmessage.time.redis.pool.max-wait=${spring.redis.pool.max-wait}
kf.chatmessage.time.redis.pool.max-total=${spring.redis.pool.max-total}

#微信渠道客服回复消息的时间限制
kf.chatmessage.weixin.timelimit=172800000
kf.chatmessage.weixin.msgcountlimit=20

# 控制客服的老调度系统是否运行的开关
kf.old.schedule.execute=true

# ================ session-count redis config ====================
kf.session-count.redis.host=${spring.redis.host}
kf.session-count.redis.port=${spring.redis.port}
kf.session-count.redis.timeout=${spring.redis.timeout}
kf.session-count.redis.pool.max-idle=${spring.redis.pool.max-idle}
kf.session-count.redis.pool.min-idle=${spring.redis.pool.min-idle}
kf.session-count.redis.pool.max-wait=${spring.redis.pool.max-wait}
kf.session-count.redis.pool.max-total=${spring.redis.pool.max-total}

# ================ session-count config ===========================
kf.session-count.enable=true
kf.session-count.expire.in-day=2

# ================ agent-queue redis config ====================
kf.agent-queue.redis.host=${spring.redis.host}
kf.agent-queue.redis.port=${spring.redis.port}
kf.agent-queue.redis.timeout=${spring.redis.timeout}
kf.agent-queue.redis.pool.max-idle=${spring.redis.pool.max-idle}
kf.agent-queue.redis.pool.min-idle=${spring.redis.pool.min-idle}
kf.agent-queue.redis.pool.max-wait=${spring.redis.pool.max-wait}
kf.agent-queue.redis.pool.max-total=${spring.redis.pool.max-total}

# =================agentmanager===================
consumer.agentmanager.num=1
consumer.agentmanager.expire=40000

kf.redis.pool.agentmanager.host=127.0.0.1
kf.redis.pool.agentmanager.port=6379
kf.redis.pool.agentmanager.timeout=40000
kf.redis.pool.agentmanager.max-idle=50
kf.redis.pool.agentmanager.min-idle=10
kf.redis.pool.agentmanager.max-wait=-1
kf.redis.pool.agentmanager.max-total=500

# 调度使用的信号队列
kefu.schedule-prepare.redis.topic=kf:schedule:execute:queue
# 消费队列的消费者数量
kefu.schedule-prepare.consumerNum=5
# kefu schedule prepare redis
kf.redis.pool.schedule-prepare.host=${spring.redis.host}
kf.redis.pool.schedule-prepare.port=${spring.redis.port}
kf.redis.pool.schedule-prepare.timeout=${spring.redis.timeout}
kf.redis.pool.schedule-prepare.max-idle=${spring.redis.pool.max-idle}
kf.redis.pool.schedule-prepare.min-idle=${spring.redis.pool.min-idle}
kf.redis.pool.schedule-prepare.max-wait=${spring.redis.pool.max-wait}
kf.redis.pool.schedule-prepare.max-total=${spring.redis.pool.max-total}

service.client.org.feign.name=OrgReadwrite
service.client.org.feign.url=http://127.0.0.1:8187

##================================feign===========================
feign.hystrix.enabled=false
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=3000
ribbon.ConnectTimeout=3000
ribbon.ReadTimeout=3000

# ================ third party robot config ===========================
kf.third-party.robot.enable=true
kf.third-party.robot.tenantId=1411
kf.third-party.robot.application.url=chat-bot.zhongan.com
kf.third-party.robot.application.name=thirdpartyrobot

# ================ prompt for not support multimedia (instead of return default answer) for the following tenants ===========================
kf.robot.prompt.notsupport.multimedia.tenantId=6795

service.client.timeplan.feign.name=TimePlanServer
service.client.timeplan.feign.url=http://localhost:8678

kf.crm.customer.event.consumer.enable=true

# CRM服务发现
service.client.crm.feign.name=CrmRestServer
service.client.crm.feign.url=http://localhost:8590
